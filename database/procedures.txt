1. User Management

RegisterUser: (You already have this) Handles new user creation, including password hashing and checking for duplicate username/email.

AuthenticateUser:

Input: username, raw_password

Action: Selects the user record matching the username, hashes the input password, compares it with the stored hash.

Output: User details (user_id, name, etc.) if successful, or an error/NULL otherwise. Uses parameters.

UpdateUserProfile:

Input: user_id, new profile details (phone, hostel, etc.)

Action: Updates the specified user's record in the Users table. Uses parameters.

ChangePassword:

Input: user_id, old_raw_password, new_raw_password

Action: Authenticates the user with the old password, hashes the new password, and updates the password_hash. Uses parameters, transactions.

GetUserProfile:

Input: user_id

Action: Selects and returns profile details for a given user. Simple/Parameterized.

2. Item Management

ListItem:

Input: owner_id, category_id, item details (name, description, price, condition, etc.)

Action: Inserts a new record into the Items table. Could potentially handle inserting a primary image into ItemImages within the same transaction. Uses parameters, transactions.

UpdateItemDetails:

Input: item_id, user_id (for permission check), new item details.

Action: Verifies the user is the owner, then updates the Items record. Uses parameters.

UpdateItemAvailability:

Input: item_id, new_availability_status.

Action: Updates the availability_status in the Items table. Uses parameters.

GetItemDetails:

Input: item_id

Action: Selects detailed information about an item, potentially joining with Users (for owner info) and Categories. Parameterized, uses joins.

AddItemImage:

Input: item_id, image_url, is_primary

Action: Inserts a record into the ItemImages table. Might include logic to ensure only one primary image. Uses parameters.

DeleteItem:

Input: item_id, user_id (for permission check)

Action: Verifies ownership, checks for active rentals (using ON DELETE RESTRICT), then deletes the item (cascading to ItemImages, WishlistItems). Uses parameters, checks constraints.

3. Browsing & Wishlist

GetItemsByCategory:

Input: category_id, possibly filters (availability, price range).

Action: Selects items belonging to a specific category. Parameterized.

SearchItems:

Input: Search terms, filters.

Action: Performs a search across item names/descriptions, potentially filtering by category, price, availability. (Note: Complex searches are sometimes better handled in application logic, but basic ones can be SPs). Parameterized, complex logic.

AddToWishlist:

Input: user_id, item_id

Action: Inserts a record into WishlistItems, handling potential duplicate entries (using UNIQUE constraint). Uses parameters, error handling.

RemoveFromWishlist:

Input: user_id, item_id

Action: Deletes a record from WishlistItems. Uses parameters.

GetUserWishlist:

Input: user_id

Action: Selects all items wishlisted by a specific user (joining WishlistItems with Items). Parameterized, joins.

4. Rental Management

RequestRental:

Input: renter_id, item_id, start_date, end_date.

Action: Checks item availability for the requested dates, calculates agreed_price, inserts a new record into Rentals with 'requested' status. Creates a notification for the owner. Uses parameters, validation, transaction, potentially calls CreateNotification.

UpdateRentalStatus:

Input: rental_id, new_status (confirmed, cancelled, active, completed, etc.), user_id (performing the action).

Action: Verifies permissions (e.g., only owner confirms, only renter cancels before confirmation), updates the Rentals.rental_status. If confirming/starting, updates Items.availability_status to 'rented'. If completing/cancelling, updates Items.availability_status to 'available'. Creates notifications. Uses parameters, complex logic, transactions. [7 - Transaction Management]

GetUserRentals:

Input: user_id, role ('renter' or 'owner').

Action: Selects rental history/active rentals for a user, either as a renter or as the owner of the items. Parameterized, joins.

5. Notification Management

CreateNotification: (Could be internal, called by other procedures)

Input: user_id (recipient), related_entity_id, notification_type, message.

Action: Inserts a new record into the Notifications table. Uses parameters.

GetUserNotifications:

Input: user_id

Action: Retrieves notifications for a specific user, possibly ordered by date. Parameterized.